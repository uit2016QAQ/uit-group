#include<stdio.h>
#include<stdlib.h>
#define LIST_INIT_SIZE 100
#define LISTINCREMENT 10 
#define OK 1
#define ERROR 0
#define OVERFLOW -2
typedef int ElemType;
typedef int Status;
int i,*p,*q;
ElemType e;
typedef struct
{
	ElemType *elem;//定义成指针类型
	int length;
	int listsize;//当前分配的存储容量（以sizeof(ElemType)为单位） 
}SqList;
//**********************构建空的线性表**********************// 
Status InitList_Sq(SqList &L)//构建一个空的线性表L 
{
  L.elem=(ElemType *)malloc(LIST_INIT_SIZE*sizeof(ElemType));
  if(!L.elem)
  exit(OVERFLOW);//内存分配失败
  L.length=0;
  L.listsize=LIST_INIT_SIZE;//初始储存容量
  return OK; 
  }
  //********************线性表输入函数*********************//
  void input(SqList &L)
  {
  	scanf("%d",L.elem);//要先输入一个，不然一开始就是0，无法进行循环
	  while(*L.elem)
	  {
	  	L.elem++;
	  	L.length++;
	  	scanf("%d",L.elem);//循环中也要在输入 
	  } 
  } 
  //********************线性表输出函数*********************//
  void print(SqList &L)
  {
  	int n;
  	for(n=0;n<L.length;n++)
  	{
  		printf("%d\t",*L.elem);
  		L.elem++;
  		
  	}
  } 
  //*******************线性表插入函数（在第i个位子插入一个数据e)*********//
  Status ListInsert_Sq(SqList &L,int i,ElemType e)//插入函数
  {
    //i 合法值为1<=i<=ListLengh.Sq(L)+1
	Status *newbase;//指针类型。因为elem是指针类型
	if(i<1||i>L.length+1)//i值不合法 
	return ERROR; 
	 if(L.length>=L.listsize)//当前储存空间满了，增加分配
	 {
	 newbase=(ElemType *)realloc(L.elem,(L.listsize+LISTINCREMENT)*sizeof(ElemType));//分配存储空间
	 if(!newbase)
	 exit(OVERFLOW);
	 L.elem=newbase;
	 L.listsize+=LISTINCREMENT;
}
    q=&(L.elem[i-1]);
    for(p=&(L.elem[L.length-1]);p>=q;--p)
    *(p+1)=*p;
    *q=e;
    ++L.length;
    return OK;
}
//********************线性表删除函数*****************************//
 Status ListDelete_Sq(SqList &L,int i,ElemType &e)
 {
 	//在线性表L中删除第i个元素，并用e返回其值
	 //i的合法值为1<=i<=ListLength.Sq(L)
	 if((i<1)||(i>L.length))
	 return ERROR;
	 p=&(L.elem[i-1]);
	 e=*p;
	 q=L.elem+L.length-1;
	 for(++p;p<=q;++p)
	 *(p-1)=*p;
	 --L.length;
	 return OK;
	  
 } 
 //****************线性表查找函数（找到第一个与e相等的值，返回其位置！）*******//
 int LocateElem_Sq(SqList L,ElemType e,Status(*compare)(ElemType,ElemType))//定位函数
 {
    i=1;
	 p=L.elem;
	 while(i<=L.length&&!(*compare)(*p++,e))
	 ++i;
	 if(i<=L.length)
	 return i;
	 else 
	 return 0;
}
Status Compare(ElemType m,ElemType e)
{
	if(m==e)
	return OK;
	else
	return ERROR;
	
}
//****************主函数************************//
int main()
{
	SqList L;
	int a[100];
	if(InitList_Sq(L))
	{
		L.elem=a;
		printf("请输入数据：\n");
		input(L);
	}
	L.elem=a;
	print(L);
	printf("\n");
	printf("请输入插入元素位子：");
	scanf("%d",&i);
	printf("请输入新元素：");
	scanf("%d",&e);
	L.elem=a; 
	if(ListInsert_Sq(L,i,e))
	{
		printf("插入元素后的表含%d个元素:\n",L.length);
		L.elem=a;
		print(L);
	}
	printf("\n");
	L.elem=a;
	printf("请输入删除元素的位子：");
	scanf("%d",&i);
	if(ListDelete_Sq(L,i,e))
	{
		printf("您删除的元素为:%d\n",e);
        printf("删除元素后的表含%d个元素\n",L.length);
        L.elem=a;
        print(L);
	} 
	printf("请输入您要找的元素的值:");
	scanf("%d",&e);
	if(LocateElem_Sq(L,e,Compare))
	printf("元素%d在顺序线性表L的位序为:%d\n",e,i);
	else
	printf("您输入的元素不在表L中\n");
} 